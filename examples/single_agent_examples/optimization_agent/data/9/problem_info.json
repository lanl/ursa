{
    "parametrized_description": "An artisan produces NumJarTypes different types of terracotta jars. Each jar type requires ShapingTimePerType shaping time and BakingTimePerType baking time. Each week, there is a total shaping time available of ShapingTimeAvailable and a total baking time available of BakingTimeAvailable. The profit earned per unit of each jar type is ProfitPerType. The artisan seeks to determine the number of jars of each type to produce in order to maximize total profit.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumJarTypes": {
            "description": "Number of different types of terracotta jars produced",
            "shape": []
        },
        "ShapingTimePerType": {
            "description": "Amount of shaping time required to produce one unit of each jar type",
            "shape": [
                "NumJarTypes"
            ]
        },
        "BakingTimePerType": {
            "description": "Amount of baking time required to produce one unit of each jar type",
            "shape": [
                "NumJarTypes"
            ]
        },
        "ProfitPerType": {
            "description": "Profit earned per unit of each jar type",
            "shape": [
                "NumJarTypes"
            ]
        },
        "ShapingTimeAvailable": {
            "description": "Total amount of shaping time available per week",
            "shape": []
        },
        "BakingTimeAvailable": {
            "description": "Total amount of baking time available per week",
            "shape": []
        }
    },
    "variables": {
        "NumJars": {
            "description": "The number of jars produced for each type",
            "type": "continuous",
            "shape": [
                "NumJarTypes"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total shaping time required to produce the jars, calculated as the sum of ShapingTimePerType multiplied by the number of jars of each type produced, cannot exceed ShapingTimeAvailable.",
            "formulation": "\\sum_{i=1}^{NumJarTypes} ShapingTimePerType_i \\times NumJars_i \\leq ShapingTimeAvailable",
            "code": {
                "gurobipy": "model.addConstr(quicksum(ShapingTimePerType[i] * NumJars[i] for i in range(NumJarTypes)) <= ShapingTimeAvailable)"
            }
        },
        {
            "description": "The total baking time required to produce the jars, calculated as the sum of BakingTimePerType multiplied by the number of jars of each type produced, cannot exceed BakingTimeAvailable.",
            "formulation": "\\sum_{j=1}^{NumJarTypes} BakingTimePerType_j \\times NumJars_j \\leq BakingTimeAvailable",
            "code": {
                "gurobipy": "model.addConstr(quicksum(BakingTimePerType[j] * NumJars[j] for j in range(NumJarTypes)) <= BakingTimeAvailable)"
            }
        }
    ],
    "objective": {
        "description": "Total profit is the sum of the profit per jar type multiplied by the number of jars of each type produced. The objective is to maximize the total profit.",
        "formulation": "Max \\sum_{i=1}^{NumJarTypes} ProfitPerType_{i} \\times NumJars_{i}",
        "code": {
            "gurobipy": "model.setObjective(quicksum(ProfitPerType[i] * NumJars[i] for i in range(NumJarTypes)), GRB.MAXIMIZE)"
        }
    }
}