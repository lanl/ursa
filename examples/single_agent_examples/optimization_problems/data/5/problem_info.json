{
    "parametrized_description": "Minimize (SeniorWage \u00d7 NumberOfSeniorCitizens + YoungAdultWage \u00d7 NumberOfYoungAdults) subject to (SeniorWage \u00d7 NumberOfSeniorCitizens + YoungAdultWage \u00d7 NumberOfYoungAdults \u2264 MaxWeeklyWageBill), (NumberOfSeniorCitizens + NumberOfYoungAdults \u2265 MinWorkersPerDay), (NumberOfYoungAdults \u2265 MinYoungAdultsPerDay), and (NumberOfYoungAdults \u2265 MinYoungToSeniorRatio \u00d7 NumberOfSeniorCitizens).",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "SeniorWage": {
            "description": "Weekly wage rate for senior citizens",
            "shape": []
        },
        "YoungAdultWage": {
            "description": "Weekly wage rate for young adults",
            "shape": []
        },
        "MaxWeeklyWageBill": {
            "description": "Maximum weekly wage bill",
            "shape": []
        },
        "MinWorkersPerDay": {
            "description": "Minimum number of workers required per day",
            "shape": []
        },
        "MinYoungAdultsPerDay": {
            "description": "Minimum number of young adults required per day",
            "shape": []
        },
        "MinYoungToSeniorRatio": {
            "description": "Minimum ratio of young adults to senior citizens",
            "shape": []
        }
    },
    "variables": {
        "NumberOfSeniorCitizens": {
            "description": "The number of senior citizens",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        },
        "NumberOfYoungAdults": {
            "description": "The number of young adults",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total weekly wage bill (SeniorWage \u00d7 NumberOfSeniorCitizens + YoungAdultWage \u00d7 NumberOfYoungAdults) must not exceed the maximum weekly wage bill (MaxWeeklyWageBill).",
            "formulation": "SeniorWage \\times NumberOfSeniorCitizens + YoungAdultWage \\times NumberOfYoungAdults \\leq MaxWeeklyWageBill",
            "code": {
                "gurobipy": "model.addConstr(SeniorWage * NumberOfSeniorCitizens + YoungAdultWage * NumberOfYoungAdults <= MaxWeeklyWageBill)"
            }
        },
        {
            "description": "The total number of employees (NumberOfSeniorCitizens + NumberOfYoungAdults) must be at least the minimum number of workers required per day (MinWorkersPerDay).",
            "formulation": "NumberOfSeniorCitizens + NumberOfYoungAdults \\geq MinWorkersPerDay",
            "code": {
                "gurobipy": "model.addConstr(NumberOfSeniorCitizens + NumberOfYoungAdults >= MinWorkersPerDay)"
            }
        },
        {
            "description": "The number of young adults (NumberOfYoungAdults) must be at least the minimum number of young adults required per day (MinYoungAdultsPerDay).",
            "formulation": "NumberOfYoungAdults \\geq MinYoungAdultsPerDay",
            "code": {
                "gurobipy": "model.addConstr(NumberOfYoungAdults >= MinYoungAdultsPerDay)"
            }
        },
        {
            "description": "The number of young adults (NumberOfYoungAdults) must be at least the product of the minimum young to senior ratio (MinYoungToSeniorRatio) and the number of senior citizens (NumberOfSeniorCitizens).",
            "formulation": "NumberOfYoungAdults \\geq MinYoungToSeniorRatio \\times NumberOfSeniorCitizens",
            "code": {
                "gurobipy": "model.addConstr(NumberOfYoungAdults >= MinYoungToSeniorRatio * NumberOfSeniorCitizens)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total weekly wage expenses, calculated as (SeniorWage \u00d7 NumberOfSeniorCitizens + YoungAdultWage \u00d7 NumberOfYoungAdults).",
        "formulation": "Min SeniorWage \\times NumberOfSeniorCitizens + YoungAdultWage \\times NumberOfYoungAdults",
        "code": {
            "gurobipy": "model.setObjective(SeniorWage * NumberOfSeniorCitizens + YoungAdultWage * NumberOfYoungAdults, GRB.MINIMIZE)"
        }
    }
}