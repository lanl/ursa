{
    "parametrized_description": "Let x_Z, x_S, and x_W represent the number of advertisements on z-tube, soorchle, and wassa respectively. The objective is to maximize the total audience, which is calculated as ViewersZTube multiplied by x_Z plus ViewersSoorchle multiplied by x_S plus ViewersWassa multiplied by x_W. The constraints are as follows: the total cost, given by CostZTube times x_Z plus CostSoorchle times x_S plus CostWassa times x_W, must not exceed the WeeklyAdvertisingBudget; the number of soorchle advertisements x_S must be less than or equal to MaxAdsSoorchle; the number of wassa advertisements x_W must be at most MaxFractionWassaAds multiplied by the total number of advertisements (x_Z + x_S + x_W); and the number of z-tube advertisements x_Z must be at least MinFractionZTubeAds multiplied by the total number of advertisements (x_Z + x_S + x_W).",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "CostZTube": {
            "description": "Cost per advertisement on z-tube",
            "shape": []
        },
        "ViewersZTube": {
            "description": "Number of viewers attracted by each advertisement on z-tube",
            "shape": []
        },
        "CostSoorchle": {
            "description": "Cost per advertisement on soorchle",
            "shape": []
        },
        "ViewersSoorchle": {
            "description": "Number of viewers attracted by each advertisement on soorchle",
            "shape": []
        },
        "CostWassa": {
            "description": "Cost per advertisement on wassa",
            "shape": []
        },
        "ViewersWassa": {
            "description": "Number of viewers attracted by each advertisement on wassa",
            "shape": []
        },
        "MaxAdsSoorchle": {
            "description": "Maximum number of advertisements allowed on soorchle",
            "shape": []
        },
        "MaxFractionWassaAds": {
            "description": "Maximum fraction of total advertisements allowed on wassa",
            "shape": []
        },
        "MinFractionZTubeAds": {
            "description": "Minimum fraction of total advertisements required on z-tube",
            "shape": []
        },
        "WeeklyAdvertisingBudget": {
            "description": "Weekly advertising budget",
            "shape": []
        }
    },
    "variables": {
        "NumberAdsZTube": {
            "description": "The number of advertisements on Z-Tube",
            "type": "continuous",
            "shape": []
        },
        "NumberAdsSoorchle": {
            "description": "The number of advertisements on Soorchle",
            "type": "continuous",
            "shape": []
        },
        "NumberAdsWassa": {
            "description": "The number of advertisements on Wassa",
            "type": "continuous",
            "shape": []
        },
        "xZ": {
            "description": "The number of advertisements on Z-Tube",
            "type": "continuous",
            "shape": []
        },
        "xS": {
            "description": "The number of advertisements on Soorchle",
            "type": "continuous",
            "shape": []
        },
        "xW": {
            "description": "The number of advertisements on Wassa",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total cost, given by CostZTube times x_Z plus CostSoorchle times x_S plus CostWassa times x_W, must not exceed the WeeklyAdvertisingBudget.",
            "formulation": "CostZTube \\times NumberAdsZTube + CostSoorchle \\times NumberAdsSoorchle + CostWassa \\times NumberAdsWassa \\leq WeeklyAdvertisingBudget",
            "code": {
                "gurobipy": "model.addConstr(CostZTube * NumberAdsZTube + CostSoorchle * NumberAdsSoorchle + CostWassa * NumberAdsWassa <= WeeklyAdvertisingBudget)"
            }
        },
        {
            "description": "The number of soorchle advertisements x_S must be less than or equal to MaxAdsSoorchle.",
            "formulation": "NumberAdsSoorchle \\leq MaxAdsSoorchle",
            "code": {
                "gurobipy": "model.addConstr(NumberAdsSoorchle <= MaxAdsSoorchle)"
            }
        },
        {
            "description": "The number of wassa advertisements x_W must be at most MaxFractionWassaAds multiplied by the total number of advertisements (x_Z + x_S + x_W).",
            "formulation": "xW \\leq MaxFractionWassaAds \\times \\left( xZ + xS + xW \\right )",
            "code": {
                "gurobipy": "model.addConstr((1 - MaxFractionWassaAds) * xW <= MaxFractionWassaAds * (xZ + xS))"
            }
        },
        {
            "description": "The number of z-tube advertisements x_Z must be at least MinFractionZTubeAds multiplied by the total number of advertisements (x_Z + x_S + x_W).",
            "formulation": "xZ \\geq MinFractionZTubeAds \\times (xZ + xS + xW)",
            "code": {
                "gurobipy": "model.addConstr(xZ >= MinFractionZTubeAds * (xZ + xS + xW))"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total audience, which is calculated as ViewersZTube multiplied by x_Z plus ViewersSoorchle multiplied by x_S plus ViewersWassa multiplied by x_W.",
        "formulation": "Max \\ ViewersZTube \\times x_Z + ViewersSoorchle \\times x_S + ViewersWassa \\times x_W",
        "code": {
            "gurobipy": "model.setObjective(ViewersZTube * xZ + ViewersSoorchle * xS + ViewersWassa * xW, GRB.MAXIMIZE)"
        }
    }
}