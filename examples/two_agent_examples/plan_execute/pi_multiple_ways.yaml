project: pi_multiple_ways

# omit if not needed
# this is where you might link in a local dataset you want the agents
# to have access to, or a program (simulation, executable, etc) or
# libraries you have locally that you want the agent to use.
# to be clear, you'd then tell the agent (below) that it has
# access to the files you describe in 'dest' in the symlink
# below.
# symlink:
#  source: ./some-destination-directory
#  dest: the-directory-name-symlinked-for-this-instance-to-see

# this task is easy enough that you should consider running it with a low
# quality / fast model like o3-mini
# this demo isn't intended to give you really high quality results, but
# o3-mini doesn't always work for agentic tasks like URSA, so don't be 
# surprised if you need to pick a slower, higher quality model - these
# things are stochastic after all :).
models:
  choices:
    - openai/gpt-5
    - openai/o3
    - openai/o3-mini
  default: openai/o3-mini

# planning_mode must either be 'single' or 'heirarchical'
# single is one pass through planning and then it executes each
#   step of the plan sequentially
# heirarchical starts w/ a single plan, and THEN, for each step it
#   plans that step again (effectively steps 1-10 might turn into
#   1.1 -> 1.5, 2.1 -> 2.3, . . . 10.0 -> 10.7).  This can both
#   increase runtime and result quality substantially
# if you leave it empty, it will just prompt you
planning_mode: # single

problem: |
  * TITLE: Calculate Pi multiple ways

  Your task is to create and test at least 5 different ways of calculating Pi in Python.
  For each method, run your test and save data files (e.g. JSON, CSV, your choice)
  related to convergence tests for that method.  The final output should be a web page
  with a short explanation of each method, an evaluation of which got closer to the
  correct value for Pi, and a single plot which shows all results with the calculated
  value for Pi on the y-axis, x-axis will be the number of steps taken in that 
  method to get that result.

  CONSTRAINTS:
    * Plots should be attractive, colorful (e.g. each method a different color), and
      created using Seaborn plotting library.
    * No method should be allowed to for more than 5 minutes max.
    * Before running any methods, but after deciding what 5 methods you will use,
      you must hypothesize and save to hypothesis.txt a brief description of your
      hypothesis which method will perform the best.
    * While we discuss the x-axis being the number of steps, obviously different
      methods may take more/less time to take a step.  You must save that information
      as well and produce a bar chart which presents the time/step for each
      method.
    * The line plot should include a dashed, black line at the known value for Pi
      via numpy.
    * Be careful with your line plot, it's possible (likely?) that early estimates will be
      very bad and you need to adjust the scale.  You should be sure to make a plot where
      the y-axis scale focuses on the region of interest, not just the worst values.
      For example, if an estimate is 10.0 and then all the rest of the estimates after
      near 3.14 - the plot scale will be zoomed out so far that we cannot see the "action"
      down near 3.14.
    * Web page must present the 2 plots, a discussion of each method, the hypothesis,
      and an analysis of results (e.g. whether you validated or refuted your
      hypothesis).
    * Do not display any plots to the user's screen - all plots must be saved to disk!
